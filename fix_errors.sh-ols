#!/bin/bash

# Set the API key
api_key="YOUR_API_KEY"

# Set the model for code completion
model="davinci"
user_input=($1)

# Set the path to the input file
input_file="$user_input"

# Set the path to the output file
output_file="$user_input-ols"

# Function to get code completions from the API
get_completions() {
  local prompt=$1
  local model=$2
  local response
  response=$(curl -X POST -H "Content-Type: application/json" -d "{\"prompt\": \"$prompt\", \"model\": \"$model\", \"max_tokens\": 1024, \"n\": 1, \"stop\": null, \"temperature\": 0.5}" "https://api.openai.com/v1/completions?api_key=$api_key")
  local completions=$(echo "$response" | jq -r '.choices[].text')
  echo "$completions"
}

# Read the input file line by line
while IFS='' read -r line || [[ -n "$line" ]]; do
  # Check if the line is a syntax error
  if echo "$line" | grep -q "^\[ERROR\]"; then
    # Extract the code snippet from the error message
    code=$(echo "$line" | sed -E 's/^\[ERROR\] (.*): .*$/\1/')

    # Get code completions from the API
    completions=$(get_completions "$code" "$model")

    # Choose the first code completion as the fix
    fix=$(echo "$completions" | head -n 1)

    # Output the fixed code to the output file
    echo "$fix" >> "$output_file"
  else
    # If the line is not a syntax error, just copy it to the output file
    echo "$line" >> "$output_file"
  fi
done < "$input_file"
#!/bin/bash

# Set the API key
openai.api_key="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"

# Set the model for code completion
model="davinci"
user_input=($1)

# Set the path to the input file
input_file="$user_input"

# Set the path to the output file
output_file="$user_input-ols"

# Function to get code completions from the API
get_completions() {
  local prompt=$1
  local model=$2
  local response
  response=$(curl -X POST -H "Content-Type: application/json" -d "{\"prompt\": \"$prompt\", \"model\": \"$model\", \"max_tokens\": 1024, \"n\": 1, \"stop\": null, \"temperature\": 0.5}" "https://api.openai.com/v1/completions?api_key=$api_key")
  local completions=$(echo "$response" | jq -r '.choices[].text')
  echo "$completions"
}

# Read the input file line by line
while IFS='' read -r line || [[ -n "$line" ]]; do
  # Check if the line is a syntax error
  if echo "$line" | grep -q "^\[ERROR\]"; then
    # Extract the code snippet from the error message
    code=$(echo "$line" | sed -E 's/^\[ERROR\] (.*): .*$/\1/')

    # Get code completions from the API
    completions=$(get_completions "$code" "$model")

    # Choose the first code completion as the fix
    fix=$(echo "$completions" | head -n 1)

    # Output the fixed code to the output file
    echo "$fix" >> "$output_file"
  else
    # If the line is not a syntax error, just copy it to the output file
    echo "$line" >> "$output_file"
  fi
done < "$input_file"
#!/bin/bash

# Set the API key
openai.api_key="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"

# Set the model for code completion
model="davinci"
user_input=($1)

# Set the path to the input file
input_file="$user_input"

# Set the path to the output file
output_file="$user_input-ols"

# Function to get code completions from the API
get_completions() {
  local prompt=$1
  local model=$2
  local response
  response=$(curl -X POST -H "Content-Type: application/json" -d "{\"prompt\": \"$prompt\", \"model\": \"$model\", \"max_tokens\": 1024, \"n\": 1, \"stop\": null, \"temperature\": 0.5}" "https://api.openai.com/v1/completions?api_key=$api_key")
  local completions=$(echo "$response" | jq -r '.choices[].text')
  echo "$completions"
}

# Read the input file line by line
while IFS='' read -r line || [[ -n "$line" ]]; do
  # Check if the line is a syntax error
  if echo "$line" | grep -q "^\[ERROR\]"; then
    # Extract the code snippet from the error message
    code=$(echo "$line" | sed -E 's/^\[ERROR\] (.*): .*$/\1/')

    # Get code completions from the API
    completions=$(get_completions "$code" "$model")

    # Choose the first code completion as the fix
    fix=$(echo "$completions" | head -n 1)

    # Output the fixed code to the output file
    echo "$fix" >> "$output_file"
  else
    # If the line is not a syntax error, just copy it to the output file
    echo "$line" >> "$output_file"
  fi
done < "$input_file"
#!/bin/bash

# Set the API key
api_key="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"

# Set the model for code completion
model="davinci"
user_input=($1)

# Set the path to the input file
input_file="$user_input"

# Set the path to the output file
output_file="$user_input-ols"

# Function to get code completions from the API
get_completions() {
  local prompt=$1
  local model=$2
  local response
  response=$(curl -X POST -H "Content-Type: application/json" -d "{\"prompt\": \"$prompt\", \"model\": \"$model\", \"max_tokens\": 1024, \"n\": 1, \"stop\": null, \"temperature\": 0.5}" "https://api.openai.com/v1/completions?api_key=$api_key")
  local completions=$(echo "$response" | jq -r '.choices[].text')
  echo "$completions"
}

# Read the input file line by line
while IFS='' read -r line || [[ -n "$line" ]]; do
  # Check if the line is a syntax error
  if echo "$line" | grep -q "^\[ERROR\]"; then
    # Extract the code snippet from the error message
    code=$(echo "$line" | sed -E 's/^\[ERROR\] (.*): .*$/\1/')

    # Get code completions from the API
    completions=$(get_completions "$code" "$model")

    # Choose the first code completion as the fix
    fix=$(echo "$completions" | head -n 1)

    # Output the fixed code to the output file
    echo "$fix" >> "$output_file"
  else
    # If the line is not a syntax error, just copy it to the output file
    echo "$line" >> "$output_file"
  fi
done < "$input_file"
